exit
Activity::Description.all
exit
subject.errors.full_messages
exit
subject.class.model_namee
subject.class
I18n.t "activerecord.errors.models.site.attributes.name"
exit
I18n.t "activerecord.errors.models.site.attributes.name"
I18n.t activerecord.errors.models.site.attributes.name
subject.errors.full_messages
exit
subject.errors.full_messages
exit
subject.errors.full_messages
subject.errors
subject.valid?
I18n.t("activerecord.errors.models.site.attributes.name.invalid")
I18n.to("activerecord.errors.models.site.attributes.name.invalid")
subject.model_name.human(:color_palette_id)
subject.model_name.human
subject.model_name
subject.errors.messages
subject.errors
exit
actual_associations - expected
actual_associations.first
expected.first
exit
expected.first
actual_associations.first
actual_association.first
actual_associations - expected
exit
actual_associations - expected
actual_associations
expected
exit
expected
exit
expected_associations.map { |expected_association| class_name = expected_association[:class_name].name }exit
expected_associations.map { |expected_association| class_name = expected_association[:class_name].name }
expected_associations.map { |expected_association| class_name = expected_association[:class_name].class_name }
        }
            # expected_association[:class_name] = class_name
            class_name = expected_association[:class_name].class_name
expected_associations.map { |expected_association|
        }
            # expected_association[:class_name] = class_name
            class_name =  expected_association[:class_name].class_name
expected_associations.map{ |expected_association|
        }
            # expected_association[:class_name] = class_name
            class_name =  expected_association[:class_name].class_name
expected_associations.map{ |expected_association|
        }
            expected_association[:class_name] = class_name
            class_name =  expected_association[:class_name].class_name
expected_associations.map{|expected_association|
        }
            expected_association[:class_name] = class_name
            class_name =  expected_association[:class_name].class_name
expected_associations.map{|expected_association|
expected_associations.map{|expected_association| expected_association[]}
expected_associations.transform_values{|k,v| puts k}
expected_associations.first
expected_associations
actual_associations
exit
described_class.reflect_on_all_associations.map{|association| {name: association.name, class_name: association.class_name, type: association.class}}exit
described_class.reflect_on_all_associations.map{|association| {name: association.name, class_name: association.class_name, type: association.class}}
described_class.reflect_on_all_associations.map{|association| {name: association.name, class_name: association.class_name}}
described_class.reflect_on_all_associations.map{|association| {name: association.name}}
described_class.reflect_on_all_associations.map{|association| association.class_name}
described_class.reflect_on_all_associations.map{|association| association.class}
described_class.reflect_on_all_associations
subject.reflect_on_all_associations
exit
eit
sub
expected_associations
"should have a #{types[0]} association on #{association} wich returns #{types[1]}"
exit
subject.attributes.keys
ap subject.attributes.keys
exit
subject.attributes.keys.join(" ")
subject.attributes.keys
(subject.attributes
(subject.attributes.keys
subject
expected_columns
exit
ThatsiteSchema.execute(@data_set.query).to_json == current_json
current_json
exit
file.read
file
exit
current_json
q
file.read
file
file.rewind
 file.write(json)
file.read
file
exit
current_json.encoding
current_json
exit
@data_set.json_attachment.open{|file| file.read}
@data_set.json_attachment
current_json
q
current_json.encoding
current_json
ThatsiteSchema.execute(@data_set.query).to_json
exit
current_json.encoding
ThatsiteSchema.execute(@data_set.query).to_json.encoding
ThatsiteSchema.execute(@data_set.query).to_json
current_json
ThatsiteSchema.execute(@data_set.query).to_json
ThatsiteSchema.execute(@data_set.query).to_json == current_json
ThatsiteSchema.execute(@data_set.query).to_json
current_json
exit
            }
              memo.merge!({text_instance.name => text_instance.content})
a.reduce(Hash.new){|memo, text_instance|
memo.merge!({text_instance.name => text_instance.content})
{text_instance.name => text_instance.content}
{}[text_instance.name] = text_instance.content
memo
memo.store text_instance.name, text_instance.content
memo
exit
record.pages
record
exit
Site.first.pages.find_by(type: 'Home')
Site.first
exit
s
exit
attributes
assign_attributes name: type.downcase
exit
attributes
attributes = {name: type.downcase}
attributes
exit
update(name: type.downcase)
saved?
attributes
update(name: type.downcase)
attributes
name = type.downcase
attributes
type.downcase
type
TYPE
